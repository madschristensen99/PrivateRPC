/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SwapCreator {
  export type SwapStruct = {
    owner: AddressLike;
    claimer: AddressLike;
    claimCommitment: BytesLike;
    refundCommitment: BytesLike;
    timeout1: BigNumberish;
    timeout2: BigNumberish;
    asset: AddressLike;
    value: BigNumberish;
    nonce: BigNumberish;
  };

  export type SwapStructOutput = [
    owner: string,
    claimer: string,
    claimCommitment: string,
    refundCommitment: string,
    timeout1: bigint,
    timeout2: bigint,
    asset: string,
    value: bigint,
    nonce: bigint
  ] & {
    owner: string;
    claimer: string;
    claimCommitment: string;
    refundCommitment: string;
    timeout1: bigint;
    timeout2: bigint;
    asset: string;
    value: bigint;
    nonce: bigint;
  };

  export type RelaySwapStruct = {
    swap: SwapCreator.SwapStruct;
    fee: BigNumberish;
    relayerHash: BytesLike;
    swapCreator: AddressLike;
  };

  export type RelaySwapStructOutput = [
    swap: SwapCreator.SwapStructOutput,
    fee: bigint,
    relayerHash: string,
    swapCreator: string
  ] & {
    swap: SwapCreator.SwapStructOutput;
    fee: bigint;
    relayerHash: string;
    swapCreator: string;
  };
}

export interface SwapCreatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claim"
      | "claimRelayer"
      | "mulVerify"
      | "newSwap"
      | "refund"
      | "setReady"
      | "swaps"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Claimed" | "New" | "Ready" | "Refunded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [SwapCreator.SwapStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRelayer",
    values: [
      SwapCreator.RelaySwapStruct,
      BytesLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mulVerify",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newSwap",
    values: [
      BytesLike,
      BytesLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [SwapCreator.SwapStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReady",
    values: [SwapCreator.SwapStruct]
  ): string;
  encodeFunctionData(functionFragment: "swaps", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mulVerify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setReady", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swaps", data: BytesLike): Result;
}

export namespace ClaimedEvent {
  export type InputTuple = [swapID: BytesLike, s: BytesLike];
  export type OutputTuple = [swapID: string, s: string];
  export interface OutputObject {
    swapID: string;
    s: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewEvent {
  export type InputTuple = [
    swapID: BytesLike,
    claimKey: BytesLike,
    refundKey: BytesLike,
    timeout1: BigNumberish,
    timeout2: BigNumberish,
    asset: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [
    swapID: string,
    claimKey: string,
    refundKey: string,
    timeout1: bigint,
    timeout2: bigint,
    asset: string,
    value: bigint
  ];
  export interface OutputObject {
    swapID: string;
    claimKey: string;
    refundKey: string;
    timeout1: bigint;
    timeout2: bigint;
    asset: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReadyEvent {
  export type InputTuple = [swapID: BytesLike];
  export type OutputTuple = [swapID: string];
  export interface OutputObject {
    swapID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundedEvent {
  export type InputTuple = [swapID: BytesLike, s: BytesLike];
  export type OutputTuple = [swapID: string, s: string];
  export interface OutputObject {
    swapID: string;
    s: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SwapCreator extends BaseContract {
  connect(runner?: ContractRunner | null): SwapCreator;
  waitForDeployment(): Promise<this>;

  interface: SwapCreatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<
    [_swap: SwapCreator.SwapStruct, _secret: BytesLike],
    [void],
    "nonpayable"
  >;

  claimRelayer: TypedContractMethod<
    [
      _relaySwap: SwapCreator.RelaySwapStruct,
      _secret: BytesLike,
      _relayer: AddressLike,
      _salt: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  mulVerify: TypedContractMethod<
    [scalar: BigNumberish, qKeccak: BigNumberish],
    [boolean],
    "view"
  >;

  newSwap: TypedContractMethod<
    [
      _claimCommitment: BytesLike,
      _refundCommitment: BytesLike,
      _claimer: AddressLike,
      _timeoutDuration1: BigNumberish,
      _timeoutDuration2: BigNumberish,
      _asset: AddressLike,
      _value: BigNumberish,
      _nonce: BigNumberish
    ],
    [string],
    "payable"
  >;

  refund: TypedContractMethod<
    [_swap: SwapCreator.SwapStruct, _secret: BytesLike],
    [void],
    "nonpayable"
  >;

  setReady: TypedContractMethod<
    [_swap: SwapCreator.SwapStruct],
    [void],
    "nonpayable"
  >;

  swaps: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [_swap: SwapCreator.SwapStruct, _secret: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRelayer"
  ): TypedContractMethod<
    [
      _relaySwap: SwapCreator.RelaySwapStruct,
      _secret: BytesLike,
      _relayer: AddressLike,
      _salt: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mulVerify"
  ): TypedContractMethod<
    [scalar: BigNumberish, qKeccak: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "newSwap"
  ): TypedContractMethod<
    [
      _claimCommitment: BytesLike,
      _refundCommitment: BytesLike,
      _claimer: AddressLike,
      _timeoutDuration1: BigNumberish,
      _timeoutDuration2: BigNumberish,
      _asset: AddressLike,
      _value: BigNumberish,
      _nonce: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<
    [_swap: SwapCreator.SwapStruct, _secret: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReady"
  ): TypedContractMethod<[_swap: SwapCreator.SwapStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swaps"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "New"
  ): TypedContractEvent<
    NewEvent.InputTuple,
    NewEvent.OutputTuple,
    NewEvent.OutputObject
  >;
  getEvent(
    key: "Ready"
  ): TypedContractEvent<
    ReadyEvent.InputTuple,
    ReadyEvent.OutputTuple,
    ReadyEvent.OutputObject
  >;
  getEvent(
    key: "Refunded"
  ): TypedContractEvent<
    RefundedEvent.InputTuple,
    RefundedEvent.OutputTuple,
    RefundedEvent.OutputObject
  >;

  filters: {
    "Claimed(bytes32,bytes32)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "New(bytes32,bytes32,bytes32,uint256,uint256,address,uint256)": TypedContractEvent<
      NewEvent.InputTuple,
      NewEvent.OutputTuple,
      NewEvent.OutputObject
    >;
    New: TypedContractEvent<
      NewEvent.InputTuple,
      NewEvent.OutputTuple,
      NewEvent.OutputObject
    >;

    "Ready(bytes32)": TypedContractEvent<
      ReadyEvent.InputTuple,
      ReadyEvent.OutputTuple,
      ReadyEvent.OutputObject
    >;
    Ready: TypedContractEvent<
      ReadyEvent.InputTuple,
      ReadyEvent.OutputTuple,
      ReadyEvent.OutputObject
    >;

    "Refunded(bytes32,bytes32)": TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
    Refunded: TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
  };
}
