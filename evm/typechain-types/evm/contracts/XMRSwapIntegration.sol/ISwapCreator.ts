/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ISwapCreator {
  export type SwapStruct = {
    owner: AddressLike;
    claimer: AddressLike;
    claimCommitment: BytesLike;
    refundCommitment: BytesLike;
    timeout1: BigNumberish;
    timeout2: BigNumberish;
    asset: AddressLike;
    value: BigNumberish;
    nonce: BigNumberish;
  };

  export type SwapStructOutput = [
    owner: string,
    claimer: string,
    claimCommitment: string,
    refundCommitment: string,
    timeout1: bigint,
    timeout2: bigint,
    asset: string,
    value: bigint,
    nonce: bigint
  ] & {
    owner: string;
    claimer: string;
    claimCommitment: string;
    refundCommitment: string;
    timeout1: bigint;
    timeout2: bigint;
    asset: string;
    value: bigint;
    nonce: bigint;
  };
}

export interface ISwapCreatorInterface extends Interface {
  getFunction(
    nameOrSignature: "claim" | "newSwap" | "refund" | "setReady" | "swaps"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [ISwapCreator.SwapStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newSwap",
    values: [
      BytesLike,
      BytesLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [ISwapCreator.SwapStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReady",
    values: [ISwapCreator.SwapStruct]
  ): string;
  encodeFunctionData(functionFragment: "swaps", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setReady", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swaps", data: BytesLike): Result;
}

export interface ISwapCreator extends BaseContract {
  connect(runner?: ContractRunner | null): ISwapCreator;
  waitForDeployment(): Promise<this>;

  interface: ISwapCreatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<
    [_swap: ISwapCreator.SwapStruct, _secret: BytesLike],
    [void],
    "nonpayable"
  >;

  newSwap: TypedContractMethod<
    [
      _claimCommitment: BytesLike,
      _refundCommitment: BytesLike,
      _claimer: AddressLike,
      _timeoutDuration1: BigNumberish,
      _timeoutDuration2: BigNumberish,
      _asset: AddressLike,
      _value: BigNumberish,
      _nonce: BigNumberish
    ],
    [string],
    "payable"
  >;

  refund: TypedContractMethod<
    [_swap: ISwapCreator.SwapStruct, _secret: BytesLike],
    [void],
    "nonpayable"
  >;

  setReady: TypedContractMethod<
    [_swap: ISwapCreator.SwapStruct],
    [void],
    "nonpayable"
  >;

  swaps: TypedContractMethod<[swapID: BytesLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [_swap: ISwapCreator.SwapStruct, _secret: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newSwap"
  ): TypedContractMethod<
    [
      _claimCommitment: BytesLike,
      _refundCommitment: BytesLike,
      _claimer: AddressLike,
      _timeoutDuration1: BigNumberish,
      _timeoutDuration2: BigNumberish,
      _asset: AddressLike,
      _value: BigNumberish,
      _nonce: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<
    [_swap: ISwapCreator.SwapStruct, _secret: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReady"
  ): TypedContractMethod<
    [_swap: ISwapCreator.SwapStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swaps"
  ): TypedContractMethod<[swapID: BytesLike], [bigint], "view">;

  filters: {};
}
