/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ISwapCreator {
  export type SwapStruct = {
    owner: AddressLike;
    claimer: AddressLike;
    claimCommitment: BytesLike;
    refundCommitment: BytesLike;
    timeout1: BigNumberish;
    timeout2: BigNumberish;
    asset: AddressLike;
    value: BigNumberish;
    nonce: BigNumberish;
  };

  export type SwapStructOutput = [
    owner: string,
    claimer: string,
    claimCommitment: string,
    refundCommitment: string,
    timeout1: bigint,
    timeout2: bigint,
    asset: string,
    value: bigint,
    nonce: bigint
  ] & {
    owner: string;
    claimer: string;
    claimCommitment: string;
    refundCommitment: string;
    timeout1: bigint;
    timeout2: bigint;
    asset: string;
    value: bigint;
    nonce: bigint;
  };
}

export interface XMRSwapAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimSwap"
      | "createSwap"
      | "getSwapStatus"
      | "hashlockToSwapID"
      | "refundSwap"
      | "setSwapReady"
      | "swapCreator"
      | "swapIDToHashlock"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "SwapClaimed"
      | "SwapCreated"
      | "SwapReady"
      | "SwapRefunded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimSwap",
    values: [BytesLike, ISwapCreator.SwapStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSwap",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashlockToSwapID",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "refundSwap",
    values: [BytesLike, ISwapCreator.SwapStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapReady",
    values: [BytesLike, ISwapCreator.SwapStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapCreator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapIDToHashlock",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "claimSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSwapStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashlockToSwapID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSwapReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapIDToHashlock",
    data: BytesLike
  ): Result;
}

export namespace SwapClaimedEvent {
  export type InputTuple = [
    hashlock: BytesLike,
    swapID: BytesLike,
    secret: BytesLike
  ];
  export type OutputTuple = [hashlock: string, swapID: string, secret: string];
  export interface OutputObject {
    hashlock: string;
    swapID: string;
    secret: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapCreatedEvent {
  export type InputTuple = [hashlock: BytesLike, swapID: BytesLike];
  export type OutputTuple = [hashlock: string, swapID: string];
  export interface OutputObject {
    hashlock: string;
    swapID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapReadyEvent {
  export type InputTuple = [hashlock: BytesLike, swapID: BytesLike];
  export type OutputTuple = [hashlock: string, swapID: string];
  export interface OutputObject {
    hashlock: string;
    swapID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapRefundedEvent {
  export type InputTuple = [
    hashlock: BytesLike,
    swapID: BytesLike,
    secret: BytesLike
  ];
  export type OutputTuple = [hashlock: string, swapID: string, secret: string];
  export interface OutputObject {
    hashlock: string;
    swapID: string;
    secret: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface XMRSwapAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): XMRSwapAdapter;
  waitForDeployment(): Promise<this>;

  interface: XMRSwapAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimSwap: TypedContractMethod<
    [hashlock: BytesLike, swap: ISwapCreator.SwapStruct, secret: BytesLike],
    [void],
    "nonpayable"
  >;

  createSwap: TypedContractMethod<
    [
      hashlock: BytesLike,
      claimCommitment: BytesLike,
      refundCommitment: BytesLike,
      claimer: AddressLike,
      timeoutDuration1: BigNumberish,
      timeoutDuration2: BigNumberish,
      asset: AddressLike,
      value: BigNumberish,
      nonce: BigNumberish
    ],
    [string],
    "payable"
  >;

  getSwapStatus: TypedContractMethod<[hashlock: BytesLike], [bigint], "view">;

  hashlockToSwapID: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  refundSwap: TypedContractMethod<
    [hashlock: BytesLike, swap: ISwapCreator.SwapStruct, secret: BytesLike],
    [void],
    "nonpayable"
  >;

  setSwapReady: TypedContractMethod<
    [hashlock: BytesLike, swap: ISwapCreator.SwapStruct],
    [void],
    "nonpayable"
  >;

  swapCreator: TypedContractMethod<[], [string], "view">;

  swapIDToHashlock: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimSwap"
  ): TypedContractMethod<
    [hashlock: BytesLike, swap: ISwapCreator.SwapStruct, secret: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSwap"
  ): TypedContractMethod<
    [
      hashlock: BytesLike,
      claimCommitment: BytesLike,
      refundCommitment: BytesLike,
      claimer: AddressLike,
      timeoutDuration1: BigNumberish,
      timeoutDuration2: BigNumberish,
      asset: AddressLike,
      value: BigNumberish,
      nonce: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getSwapStatus"
  ): TypedContractMethod<[hashlock: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hashlockToSwapID"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "refundSwap"
  ): TypedContractMethod<
    [hashlock: BytesLike, swap: ISwapCreator.SwapStruct, secret: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapReady"
  ): TypedContractMethod<
    [hashlock: BytesLike, swap: ISwapCreator.SwapStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapCreator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapIDToHashlock"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getEvent(
    key: "SwapClaimed"
  ): TypedContractEvent<
    SwapClaimedEvent.InputTuple,
    SwapClaimedEvent.OutputTuple,
    SwapClaimedEvent.OutputObject
  >;
  getEvent(
    key: "SwapCreated"
  ): TypedContractEvent<
    SwapCreatedEvent.InputTuple,
    SwapCreatedEvent.OutputTuple,
    SwapCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SwapReady"
  ): TypedContractEvent<
    SwapReadyEvent.InputTuple,
    SwapReadyEvent.OutputTuple,
    SwapReadyEvent.OutputObject
  >;
  getEvent(
    key: "SwapRefunded"
  ): TypedContractEvent<
    SwapRefundedEvent.InputTuple,
    SwapRefundedEvent.OutputTuple,
    SwapRefundedEvent.OutputObject
  >;

  filters: {
    "SwapClaimed(bytes32,bytes32,bytes32)": TypedContractEvent<
      SwapClaimedEvent.InputTuple,
      SwapClaimedEvent.OutputTuple,
      SwapClaimedEvent.OutputObject
    >;
    SwapClaimed: TypedContractEvent<
      SwapClaimedEvent.InputTuple,
      SwapClaimedEvent.OutputTuple,
      SwapClaimedEvent.OutputObject
    >;

    "SwapCreated(bytes32,bytes32)": TypedContractEvent<
      SwapCreatedEvent.InputTuple,
      SwapCreatedEvent.OutputTuple,
      SwapCreatedEvent.OutputObject
    >;
    SwapCreated: TypedContractEvent<
      SwapCreatedEvent.InputTuple,
      SwapCreatedEvent.OutputTuple,
      SwapCreatedEvent.OutputObject
    >;

    "SwapReady(bytes32,bytes32)": TypedContractEvent<
      SwapReadyEvent.InputTuple,
      SwapReadyEvent.OutputTuple,
      SwapReadyEvent.OutputObject
    >;
    SwapReady: TypedContractEvent<
      SwapReadyEvent.InputTuple,
      SwapReadyEvent.OutputTuple,
      SwapReadyEvent.OutputObject
    >;

    "SwapRefunded(bytes32,bytes32,bytes32)": TypedContractEvent<
      SwapRefundedEvent.InputTuple,
      SwapRefundedEvent.OutputTuple,
      SwapRefundedEvent.OutputObject
    >;
    SwapRefunded: TypedContractEvent<
      SwapRefundedEvent.InputTuple,
      SwapRefundedEvent.OutputTuple,
      SwapRefundedEvent.OutputObject
    >;
  };
}
