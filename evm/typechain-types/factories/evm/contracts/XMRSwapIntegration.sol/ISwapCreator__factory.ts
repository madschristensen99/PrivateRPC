/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ISwapCreator,
  ISwapCreatorInterface,
} from "../../../../evm/contracts/XMRSwapIntegration.sol/ISwapCreator";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "claimer",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "claimCommitment",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "refundCommitment",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "timeout1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timeout2",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "asset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
        ],
        internalType: "struct ISwapCreator.Swap",
        name: "_swap",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "_secret",
        type: "bytes32",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_claimCommitment",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_refundCommitment",
        type: "bytes32",
      },
      {
        internalType: "address payable",
        name: "_claimer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_timeoutDuration1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_timeoutDuration2",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256",
      },
    ],
    name: "newSwap",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "claimer",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "claimCommitment",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "refundCommitment",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "timeout1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timeout2",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "asset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
        ],
        internalType: "struct ISwapCreator.Swap",
        name: "_swap",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "_secret",
        type: "bytes32",
      },
    ],
    name: "refund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "claimer",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "claimCommitment",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "refundCommitment",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "timeout1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timeout2",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "asset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
        ],
        internalType: "struct ISwapCreator.Swap",
        name: "_swap",
        type: "tuple",
      },
    ],
    name: "setReady",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapID",
        type: "bytes32",
      },
    ],
    name: "swaps",
    outputs: [
      {
        internalType: "enum ISwapCreator.Stage",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ISwapCreator__factory {
  static readonly abi = _abi;
  static createInterface(): ISwapCreatorInterface {
    return new Interface(_abi) as ISwapCreatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ISwapCreator {
    return new Contract(address, _abi, runner) as unknown as ISwapCreator;
  }
}
